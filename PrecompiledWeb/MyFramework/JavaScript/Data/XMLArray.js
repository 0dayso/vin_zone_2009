// This class encapsulate XML DOM Document as an array.
// This function is construction function.
function XMLArray(){
	DeliverXMLArray(this);
}
// This function is used for inheritance.
function DeliverXMLArray(toObject){
	DeliverXMLBaseObject(toObject);
	toObject.ArrayName = "Item";
	toObject.IdColumnName = "DataId";
	toObject.CurrentItem = null;
	toObject.AddItem = XMLArrayAddItem;
	toObject.SetAttribute = XMLArraySetAttribute;
	toObject.SetAttributeBool = XMLArraySetAttributeBool;
	toObject.GetAttribute = XMLArrayGetAttribute;
	toObject.SetCurrentIndex = XMLArraySetCurrentIndex;
	toObject.GetCount = XMLArrayGetCount;
	toObject.GetId = XMLArrayGetId;
	toObject.LocateItem = XMLArrayLocateItem;
	toObject.RemoveItem = XMLArrayRemoveItem;
	toObject.XMLString = "";
	toObject.FindAttribute = XMLFindAttribute;
	toObject.AddItemWith = XMLArrayAddItemWith;
	toObject.MoveItemFrom = XMLArrayMoveItemFrom;
	toObject.SelectItems = XMLArraySelectItems;
	toObject.GetCurrentItemObject = XMLArrayGetCurrentItemObject;
	toObject.GetItems = XMLArrayGetItems;
	toObject.BaseId = 0;
	toObject.IdPrifix = "Id";
	toObject.IdAutoGenerated = false;
}
// Add a new item in the array. The current item is the new one.
function XMLArrayAddItem(){
	this.CurrentItem = this.XMLDocument.createElement(this.ArrayName);
	this.RootDocument.appendChild(this.CurrentItem);
	this.BaseId++;
	this.SetAttribute(this.IdColumnName, this.BaseId);
}
function XMLArrayAddItemWith(toItem){
	if(toItem!=null){
		this.RootDocument.appendChild(toItem);
	}
}
function XMLArrayMoveItemFrom(toXMLArray, tnId){
	if(toXMLArray.LocateItem(tnId)){
		var loCurrentItem = toXMLArray.CurrentItem;
		toXMLArray.RemoveItem();
		this.AddItemWith(loCurrentItem);
	}
}
// Set an attribute to the current item with the given value.
function XMLArraySetAttribute(tsName, tsValue){
	var loAttribute;
	if(this.CurrentItem!=null){
		loAttribute = this.CurrentItem.attributes.getNamedItem(tsName);
		if(loAttribute==null){
			this.AddAttribute(this.CurrentItem, tsName,tsValue);
		}else{
			if(tsValue==null) loAttribute.nodeValue = "";
			else loAttribute.nodeValue = tsValue;
		}
	}	
}
// Set an attribute with a boolean value. 
function XMLArraySetAttributeBool(tsName,tsValue){
	if(tsValue){
		this.SetAttribute(tsName,"True");
	}else{
		this.SetAttribute(tsName,"False")
	}
}
// Get an attribute value of the current item.
function XMLArrayGetAttribute(tsName){
	var loAttribute;
	if(this.CurrentItem!=null){
		loAttribute = this.CurrentItem.attributes.getNamedItem(tsName);
		if( loAttribute != null) return loAttribute.nodeValue;
		else return null;
	}else{
		return null;
	}
} 
// Find an attribute of the current item.
function XMLFindAttribute(tsName){
	var loAttribute=null;
	if(this.CurrentItem!=null){
		loAttribute = this.CurrentItem.attributes.getNamedItem(tsName);
	}
	return loAttribute;
}
// Set the index of the current item.
function XMLArraySetCurrentIndex(tnIndex){
	this.CurrentItem = this.RootDocument.childNodes(tnIndex);
}
// Return the count of the array.
function XMLArrayGetCount(){
	return this.RootDocument.childNodes.length;
}
function XMLArraySelectItems(tsFieldName, tsValue){
	var loItems = new XMLItemCollection();
	loItems.SetNodeList(this.RootDocument.selectNodes(this.ArrayName+"[@"+tsFieldName+"=\""+tsValue+"\"]"));
	return loItems;
}
function XMLArrayGetItems(tsIds){
	var loItems = new XMLItemCollection();
	for(var lnIndex=0; lnIndex<tsIds.length; lnIndex++){
		if(this.LocateItem(tsIds[lnIndex])) loItems.AddItem(this.CurrentItem);
	}
	return loItems;
}
// Locate an item with an Id. The ID column is defined with the property - IdColumnName. The default name is DataId.
function XMLArrayLocateItem(tnId){
	var loFoundNodes = this.RootDocument.selectNodes(this.ArrayName+"[@"+this.IdColumnName+"=\""+tnId+"\"]");
	if(loFoundNodes.length>0){
		this.CurrentItem = loFoundNodes.item(0);
		return true;
	}else{
		this.CurrentItem = null;
		return false;
	}	
}
// Remove the current item from the array and set the current item null.
function XMLArrayRemoveItem(tnId){
	if(tnId!=null) this.LocateItem(tnId);
	if(this.CurrentItem!=null){
		this.RootDocument.removeChild(this.CurrentItem);
		this.CurrentItem = null;
	}
}
function XMLArrayGetCurrentItemObject(){
	if(this.CurrentItem!=null){
		var loItemObject = new Object();
		var loAttribute = null;
		for(var lnIndex=0; lnIndex<this.CurrentItem.attributes.length; lnIndex++){
			loAttribute = this.CurrentItem.attributes.Item(lnIndex);
			loItemObject[loAttribute.nodeName] = loAttribute.nodeValue;
		}
		return loItemObject;
	}
	return null;
}
function XMLArrayGetId(){
	return this.GetAttribute(this.IdColumnName);
}